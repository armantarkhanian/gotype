package gotype

import (
	"fmt"
	"strings"
)

// Type is the representation of a Golang static type. Type is similar to Golang's `reflect.Type` with a little
// difference. In contrast to `reflect.Type`, Type is not constructed on runtime. Type is generated by reading Golang's
// source files and parse the abstract syntax tree. Note that because Type is generated statically, it doesn't contain
// the internal representation of Golang's interface.
//
// There are 10 kind of Golang's type supported:
//   - PrimitiveType: represents bool, byte, int, int8, int16, int64, uint, uint16, uint32, uint64, uintptr, float32,
//                  float64, complex64, complex128, string, and error.
//   - QualType: represents a pair of Golang's type identified by package path and the type's name within it's package.
//   - ChanType: represents Golang's channel.
//   - SliceType: represents Golang's slice.
//   - PtrType: represents Golang's pointer.
//   - ArrayType: represents Golang's array.
//   - MapType: represents Golang's map.
//   - FuncType: represents Golang's function.
//   - StructType: represents Golang's struct.
//   - InterfaceType: represents Golang's interface.
//
// Type contains a bunch of pointers which represents the information of each type. There is only one non-null pointer
// inside Type. For example, if the Type represents a Golang's map, the `MapType` field will be a non-null pointer and
// the others fields will be null pointer.
type Type struct {
	// PrimitiveType represents bool, byte, int, int8, int16, int64, uint, uint16, uint32, uint64, uintptr, float32,
	// float64, complex64, complex128, string, and error.
	PrimitiveType *PrimitiveType

	// QualType represents a pair of Golang's type identified by package path and the type's name within it's package.
	QualType *QualType

	// ChanType represents Golang's channel.
	ChanType *ChanType

	// SliceType represents Golang's slice.
	SliceType *SliceType

	// PtrType represents Golang's pointer.
	PtrType *PtrType

	// ArrayType represents Golang's array.
	ArrayType *ArrayType

	// MapType represents Golang's map.
	MapType *MapType

	// FuncType represents Golang's function.
	FuncType *FuncType

	// StructType represents Golang's struct.
	StructType *StructType

	// InterfaceType represents Golang's interface.
	InterfaceType *InterfaceType
}

func (i Type) String() string {
	switch {
	case i.PrimitiveType != nil:
		return string(i.PrimitiveType.Kind)
	case i.QualType != nil:
		return i.QualType.ShortPackagePath + "." + i.QualType.Name
	case i.ChanType != nil:
		dir := "chan"
		// ChanTypeDirRecv represents a `<-chan`
		if i.ChanType.Dir == ChanTypeDirRecv {
			dir = "<-chan"
		} else if i.ChanType.Dir == ChanTypeDirSend {
			// ChanTypeDirSend represents a `chan<-`
			dir = "chan<-"
		}
		return dir + " " + i.ChanType.Elem.String()
	case i.SliceType != nil:
		return "[]" + i.SliceType.Elem.String()
	case i.PtrType != nil:
		return "*" + i.PtrType.Elem.String()
	case i.ArrayType != nil:
		return fmt.Sprintf("[%v]%s", i.ArrayType.Len, i.ArrayType.Elem.String())
	case i.MapType != nil:
		return fmt.Sprintf("map[%s]%s", i.MapType.Key.String(), i.MapType.Elem.String())
	case i.FuncType != nil:
		return i.FuncType.String()
	case i.StructType != nil:
		str := "struct {"
		for _, field := range i.StructType.Fields {
			str += "\n    " + field.Name + " " + field.Type.String()
		}
		str += "\n}"
		return str
	case i.InterfaceType != nil:
		return "interface{}"
	}
	return "unknown"
}

// PrimitiveKind represents the type of primitive type.
type PrimitiveKind string

const (
	// PrimitiveKindBool represents Golang's bool
	PrimitiveKindBool PrimitiveKind = "bool"

	// PrimitiveKindByte represents Golang's byte
	PrimitiveKindByte PrimitiveKind = "byte"

	// PrimitiveKindInt represents Golang's int
	PrimitiveKindInt PrimitiveKind = "int"

	// PrimitiveKindInt8 represents Golang's int8
	PrimitiveKindInt8 PrimitiveKind = "int8"

	// PrimitiveKindInt16 represents Golang's int16
	PrimitiveKindInt16 PrimitiveKind = "int16"

	// PrimitiveKindInt32 represents Golang's int32
	PrimitiveKindInt32 PrimitiveKind = "int32"

	// PrimitiveKindInt64 represents Golang's int64
	PrimitiveKindInt64 PrimitiveKind = "int64"

	// PrimitiveKindUint represents Golang's uint
	PrimitiveKindUint PrimitiveKind = "uint"

	// PrimitiveKindUint8 represents Golang's uint8
	PrimitiveKindUint8 PrimitiveKind = "uint8"

	// PrimitiveKindUint16 represents Golang's uint16
	PrimitiveKindUint16 PrimitiveKind = "uint16"

	// PrimitiveKindUint32 represents Golang's uint32
	PrimitiveKindUint32 PrimitiveKind = "uint32"

	// PrimitiveKindUint64 represents Golang's uint64
	PrimitiveKindUint64 PrimitiveKind = "uint64"

	// PrimitiveKindUintptr represents Golang's uintptr
	PrimitiveKindUintptr PrimitiveKind = "uintptr"

	// PrimitiveKindFloat32 represents Golang's float32
	PrimitiveKindFloat32 PrimitiveKind = "float32"

	// PrimitiveKindFloat64 represents Golang's float64
	PrimitiveKindFloat64 PrimitiveKind = "float64"

	// PrimitiveKindComplex64 represents Golang's complex64
	PrimitiveKindComplex64 PrimitiveKind = "complex64"

	// PrimiteKindComplex128 Golang's complex128
	PrimitiveKindComplex128 PrimitiveKind = "complex128"

	// PrimitiveKindString represents Golang's string
	PrimitiveKindString PrimitiveKind = "string"

	// PrimitiveKindError represents Golang's error
	PrimitiveKindError PrimitiveKind = "error"
)

// PrimitiveType represents bool, byte, int, int8, int16, int64, uint, uint16, uint32, uint64, uintptr, float32,
// float64, complex64, complex128, string, and error.
type PrimitiveType struct {
	// Kind contains the kind of represented primitive.
	Kind PrimitiveKind
}

// QualType represents a pair of Golang's type identified by package path and the type's name within it's package.
type QualType struct {
	// Package contains a defined type's package path, that is, the import path
	// that uniquely identifies the package, such as "encoding/base64".
	Package          string
	ShortPackagePath string

	// Name contains the type's name inside the package.
	// The combination of Package and Name uniquely indentifies a Golang's type.
	Name string
}

// ChanTypeDir represents the direction of Golang's channel.
type ChanTypeDir int

const (
	// ChanTypeDirRecv represents a `<-chan`
	ChanTypeDirRecv = iota

	// ChanTypeDirSend represents a `chan<-`
	ChanTypeDirSend

	// ChanTypeDirSend represents a `chan`
	ChanTypeDirBoth
)

// ChanType represents Golang's channel.
type ChanType struct {
	// Dir represents the direction of channel.
	Dir ChanTypeDir

	// Elem represents the element's type of the channel.
	Elem Type
}

// SliceType represents a Golang's slice.
type SliceType struct {
	// Elem represents the element's type of the slice.
	Elem Type
}

// SliceType represents a Golang's pointer.
type PtrType struct {
	// Elem represents the type pointed by the pointer.
	Elem Type
}

// SliceType represents a Golang's array.
type ArrayType struct {
	// Len represents the length of the array.
	Len int

	// Elem represents the element's type of the array.
	Elem Type
}

// SliceType represents a Golang's map.
type MapType struct {
	// Key represents the map's key type.
	Key Type

	// Elem represents the map's element type.
	Elem Type
}

// StructType represents Golang's struct.
type StructType struct {
	// Fields contains all the fields inside the struct.
	Fields []TypeField
}

// TypeField can represent several things:
//   - A single field inside a Golang's struct.
//   - A single input parameter of a Golang's function/method.
//   - A single output parameter of a Golang's function/method.
type TypeField struct {
	// Name represents the struct's field name/function's input parameter name/function's output parameter name.
	Name string

	// Type represents the type of the field/parameter.
	Type Type
}

// FuncType represents a Golang's function.
type FuncType struct {
	// Inputs contains the input parameters of the function.
	Inputs []TypeField

	// Outputs contains the output parameters of the function.
	Outputs []TypeField

	// IsVariadic is true if the final input parameters is a "..." parameter.
	IsVariadic bool
}

func (i FuncType) String() string {
	str := "func("

	if len(i.Inputs) == 1 && i.Inputs[0].Type.FuncType != nil {
		str += i.Inputs[0].Type.String()
	} else {
		for j, arg := range i.Inputs {
			isLast := j+1 == len(i.Inputs)
			str += arg.Name
			str += " "
			if i.IsVariadic && isLast {
				str += "..."
			}
			str += arg.Type.String()
			if !isLast {
				str += ", "
			}
		}
	}

	str += ")"

	withoutBrackets := len(i.Outputs) == 1

	if len(i.Outputs) == 1 && i.Outputs[0].Type.FuncType != nil {
		str += " " + i.Outputs[0].Type.String()
	} else {
		withNames := false

		for _, arg := range i.Outputs {
			if !strings.HasPrefix(arg.Name, "out") {
				withNames = true
			}
		}
		withoutBrackets = withoutBrackets && !withNames
		for j, arg := range i.Outputs {
			isLast := j+1 == len(i.Outputs)
			if j == 0 {
				if withoutBrackets {
					str += " "
				} else {
					str += " ("
				}
			}

			if withNames {
				str += arg.Name
				str += " "
			}

			if i.IsVariadic && isLast {
				str += "..."
			}
			str += arg.Type.String()
			if !isLast {
				str += ", "
			}
		}
	}
	if !withoutBrackets {
		str += ")"
	}
	return str
}

// InterfaceTypeMethod represents a Golang's interface method.
type InterfaceTypeMethod struct {
	// Name contains the interface's method name.
	Name string

	// Func contains the type of the method.
	Func FuncType
}

// InterfaceType represents a Golang's interface.
type InterfaceType struct {
	// Methods contains the methods inside the interface.
	Methods []InterfaceTypeMethod
}

// Type converts the PrimitiveType to a Type.
func (t PrimitiveType) Type() Type { return Type{PrimitiveType: &t} }

// Type converts the QualType to a Type.
func (t QualType) Type() Type { return Type{QualType: &t} }

// Type converts the ChanType to a Type.
func (t ChanType) Type() Type { return Type{ChanType: &t} }

// Type converts the SliceType to a Type.
func (t SliceType) Type() Type { return Type{SliceType: &t} }

// Type converts the PtrType to a Type.
func (t PtrType) Type() Type { return Type{PtrType: &t} }

// Type converts the ArrayType to a Type.
func (t ArrayType) Type() Type { return Type{ArrayType: &t} }

// Type converts the MapType to a Type.
func (t MapType) Type() Type { return Type{MapType: &t} }

// Type converts the FuncType to a Type.
func (t FuncType) Type() Type { return Type{FuncType: &t} }

// Type converts the StructType to a Type.
func (t StructType) Type() Type { return Type{StructType: &t} }

// Type converts the InterfaceType to a Type.
func (t InterfaceType) Type() Type { return Type{InterfaceType: &t} }

// IsPrimitive returns true if the Type is a PrimitiveType.
func (t Type) IsPrimitive() bool { return t.PrimitiveType != nil }

// IsQual returns true if the Type is a QualType.
func (t Type) IsQual() bool { return t.QualType != nil }

// IsChan returns true if the Type is a ChanType.
func (t Type) IsChan() bool { return t.ChanType != nil }

// IsSlice returns true if the Type is a SliceType.
func (t Type) IsSlice() bool { return t.SliceType != nil }

// IsPtr returns true if the Type is a PtrType.
func (t Type) IsPtr() bool { return t.PtrType != nil }

// IsArray returns true if the Type is a ArrayType.
func (t Type) IsArray() bool { return t.ArrayType != nil }

// IsMap returns true if the Type is a MapType.
func (t Type) IsMap() bool { return t.MapType != nil }

// IsFunc returns true if the Type is a FuncType.
func (t Type) IsFunc() bool { return t.FuncType != nil }

// IsStruct returns true if the Type is a StructType.
func (t Type) IsStruct() bool { return t.StructType != nil }

// IsInterface returns true if the Type is a InterfaceType.
func (t Type) IsInterface() bool { return t.InterfaceType != nil }

// TypeSpec represents a combination of package path and the type's name which can uniquely identified Golang's type.
// TypeSpec is used as a query to `gotype`.
type TypeSpec struct {
	// PackagePath contains a defined type's package path, that is, the import path
	// that uniquely identifies the package, such as "encoding/base64".
	PackagePath string
	// Name contains the type's name inside the package.
	Name string
}
